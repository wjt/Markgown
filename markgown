#!/usr/bin/python
# vim: set fileencoding=utf-8 :
from gi.repository import GLib
from gi.repository import Gtk
from gi.repository import GtkSource
from gi.repository import WebKit

import subprocess
import sys

class Pips(Gtk.Label):
    def __init__(self):
        Gtk.Label.__init__(self, None)
        self.__n = 0
        self.__timer = None

    def count_down_from(self, n):
        self.__n = n
        self.__update_label()

        if self.__timer is None:
            self.__timer = GLib.timeout_add_seconds(1, self.__count_down)

    def __update_label(self):
        if self.__n == 0:
            self.set_text('hide me')
            if self.__timer is not None:
                GLib.source_remove(self.__timer)
        else:
            self.set_text('•' * self.__n)

    def __count_down(self):
        self.__n = self.__n - 1
        self.__update_label()
        if self.__n > 0:
            return True
        else:
            self.__timer = None
            return False


class MarkgownWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)

        self.filename = sys.argv[1]
        (ret, data) = GLib.file_get_contents(self.filename)
        assert ret

        self.set_default_size(1000, 600)
        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)
        self.add(paned)

        sw = Gtk.ScrolledWindow()

        self.b = GtkSource.Buffer()
        view = GtkSource.View.new_with_buffer(self.b)
        view.set_wrap_mode(Gtk.WrapMode.WORD)
        self.b.set_language(
            GtkSource.LanguageManager.get_default().get_language('markdown'))
        self.b.set_text(data.strip())
        # We haven't modified it per se…
        self.b.set_modified(False)
        sw.add(view)

        overlay = Gtk.Overlay()
        overlay.add(sw)

        self.spinner = Pips()
        self.spinner.set_halign(Gtk.Align.END)
        self.spinner.set_valign(Gtk.Align.END)
        overlay.add_overlay(self.spinner)

        paned.add1(overlay)

        sw = Gtk.ScrolledWindow()
        self.web = WebKit.WebView()
        self.web.connect('notify::title', self.notify_title_cb)
        sw.add(self.web)
        paned.add2(sw)

        paned.set_position(600)

        self.show_all()
        self.refresh()

        self.b.connect('modified-changed', lambda args: self.check_modified())
        self.check_modified()

        self.connect('delete-event', self.__check_save)

    def __check_save(self, *args):
        if self.b.get_modified():
            self.save()

        return False

    def save(self):
        text = self.b.get_property('text')

        if len(text) > 0 and text[-1] != '\n':
            text += '\n'

        GLib.file_set_contents(self.filename, text)
        self.b.set_modified(False)

        self.refresh()
        return False

    def refresh(self):
        pandoc = subprocess.Popen(["pandoc", "-s", self.filename], stdout=subprocess.PIPE)
        html = pandoc.stdout.read()
        self.web.load_string(html, "text/html", "UTF-8", "file:///tmp")

    def check_modified(self):
        if self.b.get_modified():
            GLib.timeout_add_seconds(5, self.save)
            self.spinner.count_down_from(5)
            self.spinner.show()
        else:
            self.spinner.hide()

    def notify_title_cb(self, *args):
        title = self.web.get_title()

        if title is None:
            title = self.filename
        else:
            title = '%s (%s)' % (title, self.filename)

        self.set_title(title)

if __name__ == '__main__':
    window = MarkgownWindow()
    window.connect('destroy', Gtk.main_quit)
    Gtk.main()
