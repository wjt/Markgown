#!/usr/bin/python
# vim: set fileencoding=utf-8 :
from gi.repository import GLib
from gi.repository import Gtk
from gi.repository import GtkSource
from gi.repository import WebKit

import subprocess
import sys

filename = sys.argv[1]
(ret, data) = GLib.file_get_contents(filename)
assert ret

window = Gtk.Window()
window.set_default_size(1000, 600)
window.set_title("%s â€“ Markgown!" % filename)
paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)
window.add(paned)

sw = Gtk.ScrolledWindow()

b = GtkSource.Buffer()
view = GtkSource.View.new_with_buffer(b)
view.set_wrap_mode(Gtk.WrapMode.WORD)
b.set_language(
    GtkSource.LanguageManager.get_default().get_language('markdown'))
b.set_text(data)
sw.add(view)

overlay = Gtk.Overlay()
overlay.add(sw)

spinner = Gtk.Spinner()
spinner.set_halign(Gtk.Align.END)
spinner.set_valign(Gtk.Align.END)
overlay.add_overlay(spinner)

paned.add1(overlay)

sw = Gtk.ScrolledWindow()
web = WebKit.WebView()
sw.add(web)
paned.add2(sw)

paned.set_position(600)

window.show_all()
window.connect('destroy', Gtk.main_quit)

timeout = None

def refresh(*args):
    global timeout
    GLib.file_set_contents(filename, b.get_property('text'))
    pandoc = subprocess.Popen(["pandoc", "-s", filename], stdout=subprocess.PIPE)
    html = pandoc.stdout.read()
    web.load_string(html, "text/html", "UTF-8", "file:///tmp")
    timeout = None
    spinner.stop()
    spinner.hide()
    return False

def changed(*args):
    global timeout
    if timeout is None:
        timeout = GLib.timeout_add_seconds(5, refresh)
        spinner.show()
        spinner.start()

b.connect('changed', changed)
refresh()

Gtk.main()
